{"version":3,"sources":["../src/route.api.js"],"names":["bcrypt","require","express","router","Router","PostModel","errorHandle","UserModel","config","post","req","res","next","name","body","pass","rePass","Error","user","hashSync","save","err","end","findOne","isOk","compareSync","authToken","_id","opts","path","maxAge","signed","httpOnly","cookie","cookieName","get","send","find","posts","json","postsList","id","params","title","content","authorId","locals","currentUser","doc","patch","findOneAndUpdate","module","exports"],"mappings":";;AAAA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,UAAUD,QAAQ,SAAR,CAAd;AACA,IAAIE,SAASD,QAAQE,MAAR,EAAb;AACA,IAAIC,YAAYJ,QAAQ,eAAR,CAAhB;AACA,IAAIK,cAAcL,QAAQ,sBAAR,CAAlB;AACA,IAAIM,YAAYN,QAAQ,eAAR,CAAhB;AACA,IAAIO,SAASP,QAAQ,UAAR,CAAb;;AAEA;AACAE,OAAOM,IAAP,CAAY,SAAZ,EAAuB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC9C,MAAIC,OAAOH,IAAII,IAAJ,CAASD,IAApB;AACA,MAAIE,OAAOL,IAAII,IAAJ,CAASC,IAApB;AACA,MAAIC,SAASN,IAAII,IAAJ,CAASE,MAAtB;;AAEA,MAAID,SAASC,MAAb,EAAqB;AACnB,WAAOJ,KAAK,IAAIK,KAAJ,CAAU,QAAV,CAAL,CAAP;AACD;;AAED,MAAIC,OAAO,IAAIX,SAAJ,EAAX;AACAW,OAAKL,IAAL,GAAYA,IAAZ;AACAK,OAAKH,IAAL,GAAYf,OAAOmB,QAAP,CAAgBJ,IAAhB,EAAsB,EAAtB,CAAZ;;AAEAG,OAAKE,IAAL,CAAU,UAASC,GAAT,EAAc;AACtB,QAAIA,GAAJ,EAAS;AACPf,kBAAYe,GAAZ,EAAiBT,IAAjB;AACD,KAFD,MAEO;AACLD,UAAIW,GAAJ;AACD;AACF,GAND;AAOD,CApBD;;AAsBA;AACAnB,OAAOM,IAAP,CAAY,SAAZ,EAAuB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC9C,MAAIC,OAAOH,IAAII,IAAJ,CAASD,IAAT,IAAiB,EAA5B;AACA,MAAIE,OAAOL,IAAII,IAAJ,CAASC,IAAT,IAAiB,EAA5B;;AAEAR,YAAUgB,OAAV,CAAkB,EAAEV,UAAF,EAAlB,EAA4B,UAASQ,GAAT,EAAcH,IAAd,EAAoB;AAC9C,QAAIG,OAAO,CAACH,IAAZ,EAAkB;AAChB,aAAON,KAAK,IAAIK,KAAJ,CAAU,OAAV,CAAL,CAAP;AACD,KAFD,MAEO;AACL,UAAIO,OAAOxB,OAAOyB,WAAP,CAAmBV,IAAnB,EAAyBG,KAAKH,IAA9B,CAAX;AACA,UAAI,CAACS,IAAL,EAAW;AACT,eAAOZ,KAAK,IAAIK,KAAJ,CAAU,MAAV,CAAL,CAAP;AACD;;AAED,UAAIS,YAAYR,KAAKS,GAArB;AACA,UAAIC,OAAO;AACTC,cAAM,GADG;AAETC,gBAAQ,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,GAAsB,EAFrB,EAEyB;AAClCC,gBAAQ,IAHC;AAITC,kBAAU;AAJD,OAAX;;AAOArB,UAAIsB,MAAJ,CAAWzB,OAAO0B,UAAlB,EAA8BR,SAA9B,EAAyCE,IAAzC;AACAjB,UAAIW,GAAJ;AACD;AACF,GApBD;AAqBD,CAzBD;;AA2BA;AACAnB,OAAOgC,GAAP,CAAW,QAAX,EAAqB,UAASzB,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC5CD,MAAIyB,IAAJ,CAAS,yBAAT;AACD,CAFD;;AAIA;AACAjC,OAAOgC,GAAP,CAAW,QAAX,EAAqB,UAAUzB,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC7CP,YAAUgC,IAAV,CAAe,EAAf,EAAmB,EAAnB,EAAuB,UAAUhB,GAAV,EAAeiB,KAAf,EAAsB;AAC3C,QAAIjB,GAAJ,EAAS;AACPf,kBAAYe,GAAZ,EAAiBT,IAAjB;AACD,KAFD,MAEO;AACLD,UAAI4B,IAAJ,CAAS,EAAEC,WAAWF,KAAb,EAAT;AACD;AACF,GAND;AAOD,CARD;;AAUA;AACAnC,OAAOgC,GAAP,CAAW,YAAX,EAAyB,UAASzB,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAChD,MAAI6B,KAAK/B,IAAIgC,MAAJ,CAAWD,EAApB;;AAEApC,YAAUkB,OAAV,CAAkB,EAAEI,KAAKc,EAAP,EAAlB,EAA+B,UAASpB,GAAT,EAAcZ,IAAd,EAAoB;AACjD,QAAIY,GAAJ,EAAS;AACPf,kBAAYe,GAAZ,EAAiBT,IAAjB;AACD,KAFD,MAEO;AACLD,UAAI4B,IAAJ,CAAS,EAAE9B,UAAF,EAAT;AACD;AACF,GAND;AAOD,CAVD;;AAYA;AACAN,OAAOM,IAAP,CAAY,QAAZ,EAAsB,UAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC7C,MAAI+B,QAAQjC,IAAII,IAAJ,CAAS6B,KAArB;AACA,MAAIC,UAAUlC,IAAII,IAAJ,CAAS8B,OAAvB;;AAEA,MAAInC,OAAO,IAAIJ,SAAJ,EAAX;AACAI,OAAKkC,KAAL,GAAaA,KAAb;AACAlC,OAAKmC,OAAL,GAAeA,OAAf;AACAnC,OAAKoC,QAAL,GAAgBlC,IAAImC,MAAJ,CAAWC,WAAX,CAAuBpB,GAAvC;AACAlB,OAAKW,IAAL,CAAU,UAASC,GAAT,EAAc2B,GAAd,EAAmB;AAC3B,QAAI3B,GAAJ,EAAS;AACPf,kBAAYe,GAAZ,EAAiBT,IAAjB;AACD,KAFD,MAEO;AACLD,UAAI4B,IAAJ,CAAS,EAAE9B,MAAMuC,GAAR,EAAT;AACD;AACF,GAND;AAOD,CAfD;;AAiBA;AACA7C,OAAO8C,KAAP,CAAa,YAAb,EAA2B,UAASvC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAClD,MAAI6B,KAAK/B,IAAIgC,MAAJ,CAAWD,EAApB;AACA,MAAIE,QAAQjC,IAAII,IAAJ,CAAS6B,KAArB;AACA,MAAIC,UAAUlC,IAAII,IAAJ,CAAS8B,OAAvB;;AAEAvC,YAAU6C,gBAAV,CAA2B,EAAEvB,KAAKc,EAAP,EAA3B,EAAwC,EAAEE,YAAF,EAASC,gBAAT,EAAxC,EAA4D,UAASvB,GAAT,EAAc;AACxE,QAAIA,GAAJ,EAAS;AACPf,kBAAYe,GAAZ,EAAiBT,IAAjB;AACD,KAFD,MAEO;AACLD,UAAIW,GAAJ;AACD;AACF,GAND;AAOD,CAZD;;AAeA6B,OAAOC,OAAP,GAAiBjD,MAAjB","file":"route.api.js","sourcesContent":["var bcrypt = require('bcrypt');\nvar express = require('express');\nvar router = express.Router();\nvar PostModel = require('./models/post');\nvar errorHandle = require('./common/errorHandle');\nvar UserModel = require('./models/user');\nvar config = require('./config');\n\n/* POST signup user */\nrouter.post('/signup', function(req, res, next) {\n  var name = req.body.name;\n  var pass = req.body.pass;\n  var rePass = req.body.rePass;\n\n  if (pass !== rePass) {\n    return next(new Error('两次密码不对'));\n  }\n\n  var user = new UserModel();\n  user.name = name;\n  user.pass = bcrypt.hashSync(pass, 10);\n\n  user.save(function(err) {\n    if (err) {\n      errorHandle(err, next);\n    } else {\n      res.end();\n    }\n  });\n});\n\n/* POST signin user */\nrouter.post('/signin', function(req, res, next) {\n  var name = req.body.name || '';\n  var pass = req.body.pass || '';\n\n  UserModel.findOne({ name }, function(err, user) {\n    if (err || !user) {\n      return next(new Error('找不到用户'));\n    } else {\n      var isOk = bcrypt.compareSync(pass, user.pass);\n      if (!isOk) {\n        return next(new Error('密码不对'));\n      }\n\n      var authToken = user._id;\n      var opts = {\n        path: '/',\n        maxAge: 1000 * 60 * 60 * 24 * 30, // cookie 有效期30天\n        signed: true,\n        httpOnly: true\n      };\n\n      res.cookie(config.cookieName, authToken, opts);\n      res.end();\n    }\n  });\n});\n\n/* GET users lists. */\nrouter.get('/users', function(req, res, next) {\n  res.send('respond with a resource');\n});\n\n/* GET posts lists 获取所有文章列表是从数据库查数据 */\nrouter.get('/posts', function (req, res, next) {\n  PostModel.find({}, {}, function (err, posts) {\n    if (err) {\n      errorHandle(err, next);\n    } else {\n      res.json({ postsList: posts });\n    }\n  });\n});\n\n/* GET one post */\nrouter.get('/posts/:id', function(req, res, next) {\n  var id = req.params.id;\n\n  PostModel.findOne({ _id: id }, function(err, post) {\n    if (err) {\n      errorHandle(err, next);\n    } else {\n      res.json({ post });\n    }\n  });\n});\n\n/* POST create post 将数据保存到数据库的post表中 */\nrouter.post('/posts', function(req, res, next) {\n  var title = req.body.title;\n  var content = req.body.content;\n\n  var post = new PostModel();\n  post.title = title;\n  post.content = content;\n  post.authorId = res.locals.currentUser._id;\n  post.save(function(err, doc) {\n    if (err) {\n      errorHandle(err, next);\n    } else {\n      res.json({ post: doc });\n    }\n  });\n});\n\n/* PATCH edit post */\nrouter.patch('/posts/:id', function(req, res, next) {\n  var id = req.params.id;\n  var title = req.body.title;\n  var content = req.body.content;\n\n  PostModel.findOneAndUpdate({ _id: id }, { title, content }, function(err) {\n    if (err) {\n      errorHandle(err, next);\n    } else {\n      res.end();\n    }\n  });\n});\n\n\nmodule.exports = router;\n"]}