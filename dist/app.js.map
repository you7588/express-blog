{"version":3,"sources":["../src/app.js"],"names":["require","express","expressLayouts","path","favicon","logger","cookieParser","bodyParser","config","auth","connectMongodb","session","page","api","MongoStore","app","set","join","__dirname","use","json","urlencoded","extended","cookieName","static","secret","sessionSecret","store","url","mongodbUrl","resave","saveUninitialized","authUser","console","log","req","res","next","err","Error","status","locals","message","error","get","format","send","toString","html","render","default","errorDetails","module","exports"],"mappings":";;AAAAA,QAAQ,eAAR;AACA,IAAIC,UAAUD,QAAQ,SAAR,CAAd;AACA,IAAIE,iBAAiBF,QAAQ,qBAAR,CAArB;AACA,IAAIG,OAAOH,QAAQ,MAAR,CAAX;AACA,IAAII,UAAUJ,QAAQ,eAAR,CAAd;AACA,IAAIK,SAASL,QAAQ,QAAR,CAAb;AACA,IAAIM,eAAeN,QAAQ,eAAR,CAAnB;AACA,IAAIO,aAAaP,QAAQ,aAAR,CAAjB;AACA,IAAIQ,SAASR,QAAQ,UAAR,CAAb;AACA,IAAIS,OAAOT,QAAQ,oBAAR,CAAX;AACA,IAAIU,iBAAiBV,QAAQ,eAAR,CAArB;AACA,IAAIW,UAAUX,QAAQ,iBAAR,CAAd;;AAEA,IAAIY,OAAOZ,QAAQ,cAAR,CAAX;AACA,IAAIa,MAAMb,QAAQ,aAAR,CAAV;;AAEA,IAAIc,aAAa,IAAIJ,cAAJ,CAAmBC,OAAnB,CAAjB;AACA,IAAII,MAAMd,SAAV;;AAEA;AACAc,IAAIC,GAAJ,CAAQ,OAAR,EAAiBb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAH,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAD,IAAII,GAAJ,CAAQjB,cAAR;;AAEA;AACA;AACAa,IAAII,GAAJ,CAAQd,OAAO,KAAP,CAAR;AACAU,IAAII,GAAJ,CAAQZ,WAAWa,IAAX,EAAR;AACAL,IAAII,GAAJ,CAAQZ,WAAWc,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAP,IAAII,GAAJ,CAAQb,aAAaE,OAAOe,UAApB,CAAR;AACAR,IAAII,GAAJ,CAAQlB,QAAQuB,MAAR,CAAerB,KAAKc,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR;;AAEAH,IAAII,GAAJ,CACER,QAAQ;AACNc,UAAQjB,OAAOkB,aADT;AAENC,SAAO,IAAIb,UAAJ,CAAe;AACpBc,SAAKpB,OAAOqB;AADQ,GAAf,CAFD;AAKNC,UAAQ,IALF;AAMNC,qBAAmB;AANb,CAAR,CADF;;AAWAhB,IAAII,GAAJ,CAAQV,KAAKuB,QAAb;AACAjB,IAAII,GAAJ,CAAQ,GAAR,EAAaP,IAAb;AACAqB,QAAQC,GAAR,CAAY,uCAAZ;AACAnB,IAAII,GAAJ,CAAQ,SAAR,EAAmBN,GAAnB;AACAoB,QAAQC,GAAR,CAAY,wCAAZ;;AAEA;AACAnB,IAAII,GAAJ,CAAQ,UAASgB,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC/B,MAAIC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAV;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACD,CAJD;;AAMA;AACAvB,IAAII,GAAJ,CAAQ,UAASmB,GAAT,EAAcH,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACpC;AACAD,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAJ,IAAeJ,GAApC;AACAF,MAAIK,MAAJ,CAAWE,KAAX,GAAmBR,IAAIpB,GAAJ,CAAQ6B,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCN,GAAvC,GAA6C,EAAhE;;AAEA;AACAL,UAAQC,GAAR,CAAY,sEAAZ;AACAE,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,MAAIS,MAAJ,CAAW;AACTzB,QADS,kBACH;AACJgB,UAAIU,IAAJ,CAAS,EAACH,OAAOL,IAAIS,QAAJ,EAAR,EAAT;AACD,KAHQ;AAITC,QAJS,kBAIH;AACJZ,UAAIa,MAAJ,CAAW,OAAX;AACD,KANQ;AAOTC,WAPS,sBAOA;AACP,UAAMR,eAAaS,YAAnB;AACAf,UAAIU,IAAJ,iCAAuCR,IAAIS,QAAJ,EAAvC;AACD;AAVQ,GAAX;AAYD,CApBD;;AAsBAK,OAAOC,OAAP,GAAiBtC,GAAjB","file":"app.js","sourcesContent":["require('./models/init');\nvar express = require('express');\nvar expressLayouts = require('express-ejs-layouts');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar config = require('./config');\nvar auth = require('./middlewares/auth');\nvar connectMongodb = require('connect-mongo');\nvar session = require('express-session');\n\nvar page = require('./route.page');\nvar api = require('./route.api');\n\nvar MongoStore = new connectMongodb(session);\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\napp.use(expressLayouts);\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser(config.cookieName));\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use(\n  session({\n    secret: config.sessionSecret,\n    store: new MongoStore({\n      url: config.mongodbUrl\n    }),\n    resave: true,\n    saveUninitialized: true\n  })\n);\n\napp.use(auth.authUser);\napp.use('/', page);\nconsole.log('==============app.js=================');\napp.use('/api/v1', api);\nconsole.log('===============app2.js================');\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message || err;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // the error response\n  console.log('===================render the app.js error page=====================');\n  res.status(err.status || 500);\n  res.format({\n    json(){\n      res.send({error: err.toString()});\n    },\n    html(){\n      res.render('error');\n    },\n    default(){\n      const message = `${errorDetails}`;\n      res.send(`500 Internal servererror:\\n${err.toString()}`);\n    },\n  });\n});\n\nmodule.exports = app;\n"]}